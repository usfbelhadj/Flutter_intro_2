// Mocks generated by Mockito 5.1.0 from annotations
// in breaking_bad/test/home_test.dart.
// Do not manually edit this file.

import 'package:breaking_bad/home_screen.dart' as _i4;
import 'package:flutter/foundation.dart' as _i3;
import 'package:flutter/material.dart' as _i1;
import 'package:mockito/mockito.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeState_0<T extends _i1.StatefulWidget> extends _i2.Fake
    implements _i1.State<T> {
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeStatefulElement_1 extends _i2.Fake implements _i1.StatefulElement {
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_2 extends _i2.Fake implements _i1.DiagnosticsNode {
  @override
  String toString(
          {_i3.TextTreeConfiguration? parentConfiguration,
          _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}

/// A class which mocks [HomeScreen].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockHomeScreen extends _i2.Mock implements _i4.HomeScreen {
  MockHomeScreen() {
    _i2.throwOnMissingStub(this);
  }

  @override
  _i1.State<_i4.HomeScreen> createState() =>
      (super.noSuchMethod(Invocation.method(#createState, []),
              returnValue: _FakeState_0<_i4.HomeScreen>())
          as _i1.State<_i4.HomeScreen>);
  @override
  _i1.StatefulElement createElement() =>
      (super.noSuchMethod(Invocation.method(#createElement, []),
          returnValue: _FakeStatefulElement_1()) as _i1.StatefulElement);
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  void debugFillProperties(_i3.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toStringShallow(
          {String? joiner = r', ',
          _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toStringShallow, [], {#joiner: joiner, #minLevel: minLevel}),
          returnValue: '') as String);
  @override
  String toStringDeep(
          {String? prefixLineOne = r'',
          String? prefixOtherLines,
          _i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.debug}) =>
      (super.noSuchMethod(
          Invocation.method(#toStringDeep, [], {
            #prefixLineOne: prefixLineOne,
            #prefixOtherLines: prefixOtherLines,
            #minLevel: minLevel
          }),
          returnValue: '') as String);
  @override
  _i1.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i3.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_2()) as _i1.DiagnosticsNode);
  @override
  List<_i1.DiagnosticsNode> debugDescribeChildren() =>
      (super.noSuchMethod(Invocation.method(#debugDescribeChildren, []),
          returnValue: <_i1.DiagnosticsNode>[]) as List<_i1.DiagnosticsNode>);
  @override
  String toString({_i1.DiagnosticLevel? minLevel = _i1.DiagnosticLevel.info}) =>
      super.toString();
}
